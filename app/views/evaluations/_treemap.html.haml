var obj = document.getElementById('chart');
var divWidth = obj.offsetWidth;

var margin = {top: 30, right: 0, bottom: 20, left: 0},
width = divWidth -25,
height = 540 - margin.top - margin.bottom,
formatNumber = d3.format(",%"),
colorDomain = [0.2, 0.4, 0.6, 0.8],
\//colorRange = ['#dda8db', '#ebf2f7', '#9cbdd9'],
colorRange = ['#99CCFF', '#8C8C8C', '#99CC66', '#FF0033'],
\//colorRange = ['green', 'orange', 'red'],
severity = {'low': 1, 'medium': 2, 'high': 3},
transitioning,
root, dataset;

\// sets x and y scale to determine size of visible boxes
var x = d3.scale.linear()
\.domain([0, width])
\.range([0, width]);

var y = d3.scale.linear()
\.domain([0, height])
\.range([0, height]);

\// adding a color scale
var color = d3.scale.linear()
\.domain(colorDomain)
\.range(colorRange);

var treemap, svg, grandparent, legend;

\//drawTreemap(null);

\// functions
function initialize(root) {
root.x = root.y = 0;
root.dx = width;
root.dy = height;
root.depth = 0;
}

\// Aggregate the values for internal nodes. This is normally done by the
\// treemap layout, but not here because of our custom implementation.
\// We also take a snapshot of the original children (_children) to avoid
\// the children being overwritten when when layout is computed.
function accumulate(d) {
return (d._children = d.children)
\// recursion step, note that p and v are defined by reduce
? d.value = d.children.reduce(function(p, v) {return p + accumulate(v); }, 0)
\: d.value
}

\// Compute the treemap layout recursively such that each group of siblings
\// uses the same size (1&#xD7;1) rather than the dimensions of the parent cell.
\// This optimizes the layout for the current zoom state. Note that a wrapper
\// object is created for the parent node for each group of siblings so that
\// the parent&#x2019;s dimensions are not discarded as we recurse. Since each group
\// of sibling was laid out in 1&#xD7;1, we must rescale to fit using absolute
\// coordinates. This lets us use a viewport to zoom.
function layout(d) {
if (d._children) {
\// treemap nodes comes from the treemap set of functions as part of d3
treemap.nodes({_children: d._children});
d._children.forEach(function(c) {
c.x = d.x + c.x * d.dx;
c.y = d.y + c.y * d.dy;
c.dx *= d.dx;
c.dy *= d.dy;
c.parent = d;
\// recursion
layout(c);
});
}
}

\// Colors are based on the 'impact' at the leaf level. At higher levels, the
\// average impact of the children is calculated and used in the color range.
\// If there is no impact, the default color is grey
function get_color(obj) {
if ("status_value" in obj) {
if (obj['status_value'] &gt; 0) {
return color(obj['status_value']);
}
}
return "#bbbbbb";
}

function colorIncrements(d){
return (colorDomain[colorDomain.length - 1] - colorDomain[0])/18*d + colorDomain[0];
}

\// determines if white or black will be better contrasting color
function getContrast50(hexcolor){
return (parseInt(hexcolor.replace('#', ''), 16) &gt; 0xffffff/3) ? 'black':'white';
}

function showCon(d) {
console.log(d.name + ": impact: " + d.impact + ", value:"  + d.value);
if (d._children) {
d._children.forEach(function(c) {
console.log(c.name + ": impact: " + c.impact + ", value:"  + c.value);
\// recursion
showCon(c);
});
}
}

function drawTreemap(category, status) {
console.log("drawTreemap");
d3.selectAll("svg").remove();
\// introduce color scale here
treemap = d3.layout.treemap()
\.children(function(d, depth) { return depth ? null : d._children; })
\.sort(function(a, b) { return b.name.localeCompare(a.name); })
\.ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
\.round(false);

svg = d3.select("#chart").append("svg")
\.attr("width", width + margin.left + margin.right)
\.attr("height", height + margin.bottom + margin.top)
\.style("margin-left", -margin.left + "px")
\.style("margin.right", -margin.right + "px")
\.append("g")
\.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
\.style("shape-rendering", "crispEdges");

grandparent = svg.append("g")
\.attr("class", "grandparent");

grandparent.append("rect")
\.attr("y", -margin.top)
\.attr("width", width)
\.attr("height", margin.top);

grandparent.append("text")
\.attr("x", 6)
\.attr("y", 6 - margin.top)
\.attr("dy", ".75em");

loadTreemapData(category, status);
}

function loadTreemapData(category, status) {
\/*api_path = "#{root_path}" + "evaluations/" + evaluation_id + "/nist";
if (category) {
api_path += "/category/" + encodeURIComponent(category);
}
if (status) {
api_path += "/status/" + encodeURIComponent(status);
}
api_path += ".json";*/
\//console.log("loadTreemapData from " + api_path);
\//d3.json(api_path, function(data) {
\//root = data
root = chart_data;
initialize(root);
accumulate(root);
\//draw_status_pie_chart(root);
\//draw_severity_pie_chart(root);
\//draw_compliance_pie_chart();
layout(root);
display(root);

function display(d) {
grandparent
\.datum(d.parent)
\.on("click", transition)
\.select("text")
\.text(name(d))

\// color header based on grandparent's impact
grandparent
\.datum(d.parent)
\.select("rect")
\.attr("fill", function(){ return get_color(d) })

var g1 = svg.insert("g", ".grandparent")
\.datum(d)
\.attr("class", "depth");

var g = g1.selectAll("g")
\.data(d._children)
\.enter().append("g");

g.filter(function(d) { return d._children; })
\.classed("children", true)
\.on("click", transition);

g.selectAll(".child")
\.data(function(d) { return d._children || [d]; })
\.enter().append("rect")
\.attr("class", "child")
\.call(rect);


g.append("rect")
\.attr("class", "parent")
\.call(rect)
\.append("title");

\/* Adding a foreign object instead of a text object, allows for text wrapping */
g.append("foreignObject")
\.call(rect)
\/* open new window based on the json's URL value for leaf nodes */
\/* Firefox displays this on top
\.on("click", function(d) {
if(!d.children){
window.open(d.url);
}
})*/
\.attr("class","foreignobj")
\.append("xhtml:div")
\.attr("dy", ".75em")
\.html(function(d) {
var colr = getContrast50(get_color(d));
if (d.desc  width &gt; 750) {
return  '
= succeed "'" do
  %p.title{:style => "color:' + colr + '"} ' + d.name + '
= succeed "';" do
  %p{:style => "color:' + colr + '"} ' + d.desc + '
= succeed "'" do
  %p.title{:style => "color:' + colr + '"} ' + d.name + '
= succeed "'" do
  %p{:style => "color:' + colr + '"} Title: ' + d.title + '
= succeed "'" do
  %p{:style => "color:' + colr + '"} Description: ' + d.description + '
= succeed "'" do
  %p{:style => "color:' + colr + '"} Impact: ' + d.impact + '
= succeed "'" do
  %p{:style => "color:' + colr + '"} Status: ' + d.status_symbol.titleize() + '
= succeed "'" do
  %p{:style => "color:' + colr + '"} Check Text: ' + d.check + '
= succeed "'" do
  %p{:style => "color:' + colr + '"} Fix Text: ' + d.fix + '
= succeed "';" do
  %p{:style => "color:' + colr + '"} NIST Ref: ' + d.nist + '
= succeed "';" do
  %p.title{:style => "color:' + colr + '"} ' + d.name + '
